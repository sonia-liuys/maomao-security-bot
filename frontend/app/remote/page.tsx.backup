"use client"

import { useState, useRef, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Power,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  Video,
  VideoOff,
  Maximize,
  Minimize,
  RotateCw,
  HandMetal,
  Eye,
  EyeOff,
  Clock,
  UserRound,
  UserCheck
} from "lucide-react"
import Navigation from "@/components/navigation"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import useRobotConnection from "@/hooks/useRobotConnection"
import { AlertTriangle } from "lucide-react"

// 定義消息類型介面
interface RobotMessage {
  type: string;
  data?: {
    image?: string;
    timestamp?: number;
    width?: number;
    height?: number;
    alarm_active?: boolean;
    eye_color?: string;
    message?: string;
    recognized_person?: string;
    confidence?: number;
    emoji?: string;
    [key: string]: any;
  };
  id?: string;
}

export default function RemoteMode() {
  const [videoActive, setVideoActive] = useState(true)
  const [zoomLevel, setZoomLevel] = useState(1)
  const [rotation, setRotation] = useState(0)
  const [handsUp, setHandsUp] = useState(false)
  const [eyesOpen, setEyesOpen] = useState(true)
  const [alarmActive, setAlarmActive] = useState(false)
  const [statusMessage, setStatusMessage] = useState("Ready to assist")
  const [faceDetectionActive, setFaceDetectionActive] = useState(false)
  const [detectedFaces, setDetectedFaces] = useState<{name: string, confidence: number, x: number, y: number, width: number, height: number}[]>([])
  const [frameRate, setFrameRate] = useState(0)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  const { isConnected, setRobotMode, sendCommand, lastMessage } = useRobotConnection()
  // 將lastMessage轉換為RobotMessage類型
  const typedLastMessage = lastMessage as RobotMessage | null
  // 使用ref追蹤是否已經發送過命令
  const hasSentCommandRef = useRef(false)
  
  // 切換到手動模式並啟動視頻流
  useEffect(() => {
    console.log("連接狀態:", isConnected, "是否已發送命令:", hasSentCommandRef.current);
    
    // 如果連接已建立且尚未發送過命令
    if (isConnected && !hasSentCommandRef.current) {
      console.log("準備發送命令...");
      
      // 添加延遲，確保連接已完全建立
      const timer = setTimeout(() => {
        try {
          console.log("開始發送命令");
          
          // 切換到手動模式
          setRobotMode("MANUAL");
          console.log("切換到手動模式");
          
          // 啟動視頻流
          if (videoActive) {
            console.log("發送啟動視頻流命令");
            const result = sendCommand({
              type: "start_video_stream",
              data: {}
            });
            console.log("視頻流命令發送結果:", result);
          } else {
            console.log("視頻未啟用，不發送視頻流命令");
          }
          
          hasSentCommandRef.current = true;
          console.log("命令已發送標記已設置");
        } catch (error) {
          console.error("設置模式失敗:", error);
        }
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [isConnected, setRobotMode, videoActive, sendCommand])
  
  // 監聽最後收到的消息，檢查警報狀態

  useEffect(() => {
    if (!lastMessage) return;
    
    try {
      // 使用類型斷言來確保 TypeScript 知道 lastMessage 的類型
      const message = lastMessage as RobotMessage;
      
      // 檢查是否是狀態更新消息
      if (message.type === 'status_update' && message.data && message.data.alarm_active !== undefined) {
        setAlarmActive(message.data.alarm_active);
        console.log(`警報狀態更新: ${message.data.alarm_active ? '活躍' : '非活躍'}`);
      }
      
      // 檢查是否是識別結果消息，並且眼睛顏色為紅色
      if (message.type === 'recognition_result' && 
          message.data && 
          message.data.eye_color === 'red') {
        setAlarmActive(true);
        console.log('收到紅色警報狀態');
      }
    } catch (error) {
      console.error('處理消息時出錯:', error);
    }
  }, [lastMessage])

  // 處理視頻流
  useEffect(() => {
    console.log("視頻流效果觸發，狀態:", {
      videoActive,
      isConnected,
      canvasExists: !!canvasRef.current
    });
    
    if (!canvasRef.current || !videoActive) {
      console.log("視頻流初始化跳過: ", !canvasRef.current ? "canvas不存在" : "視頻未啟用");
      return;
    }

    if (!isConnected) {
      console.log("視頻流初始化跳過: WebSocket未連接");
      return;
    }

    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) {
      console.error("無法獲取canvas上下文");
      return;
    }

    // 初始化畫布，顯示等待連接的訊息
    ctx.fillStyle = "#0a1520";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.font = "14px sans-serif";
    ctx.fillStyle = "#40a0ff";
    ctx.textAlign = "center";
    ctx.fillText("正在連接視頻流...", canvas.width / 2, canvas.height / 2);
    ctx.fillText("Connecting to video stream...", canvas.width / 2, canvas.height / 2 + 20);

    // 如果已連接，發送開始視頻流命令
    console.log("準備發送開始視頻流命令，連接狀態:", isConnected ? "已連接" : "未連接");
    
    // 直接發送一次視頻流命令，不等待
    try {
      console.log("立即發送視頻流命令");
      const immediateResult = sendCommand({
        type: "start_video_stream",
        data: {}
      });
      console.log("立即發送視頻流命令結果:", immediateResult);
    } catch (error) {
      console.error("立即發送視頻流命令失敗:", error);
    }
    
    // 添加延遲，確保連接已穩定，再發送一次
    const timer = setTimeout(() => {
      console.log("延遲後發送視頻流命令，連接狀態:", isConnected ? "已連接" : "未連接");
      if (!isConnected) {
        console.error("無法發送視頻流命令: WebSocket未連接");
        return;
      }
      
      try {
        const result = sendCommand({
          type: "start_video_stream",
          data: {}
        });
        console.log("延遲後視頻流命令已發送，結果:", result);
      } catch (innerError) {
        console.error("延遲後發送視頻流命令失敗:", innerError);
      }
    }, 2000);  // 延遲兩秒發送，給更多時間建立連接
    
    // 清理函數 - 停止視頻流
    return () => {
      console.log("清理視頻流效果");
      clearTimeout(timer);
      if (isConnected) {
        console.log("發送停止視頻流命令");
        try {
          sendCommand({
            type: "stop_video_stream",
            data: {}
          });
        } catch (error) {
          console.error("發送停止視頻流命令失敗:", error);
        }
      }
    };
  }, [videoActive, isConnected, sendCommand])

  // 記錄上一個視頁幀的時間戳
  // Track the timestamp of the last video frame
  const lastFrameTimestampRef = useRef<number>(0);
  
  // 處理視頁幀消息
  useEffect(() => {
    // 只在開發模式下記錄詳細日誌
    if (process.env.NODE_ENV === 'development') {
      console.log("視頁幀處理效果觸發，狀態:", {
        videoActive,
        hasCanvas: !!canvasRef.current,
        hasLastMessage: !!lastMessage,
        messageType: lastMessage ? typeof lastMessage : 'none'
      });
    }
    
    // 檢查必要條件
    if (!canvasRef.current || !videoActive) {
      return;
    }
    
    if (!lastMessage) {
      return;
    }
    
    // 解析消息
    let messageType = '';
    let messageData = null;
    
    try {
      // 如果是字符串，嘗試解析JSON
      if (typeof lastMessage === 'string') {
        // 使用明確的字符串類型斷言
        const messageStr: string = lastMessage;
        const parsedMessage = JSON.parse(messageStr) as RobotMessage;
        messageType = parsedMessage.type || '';
        messageData = parsedMessage.data || null;
      } 
      // 如果已經是對象，直接使用
      else if (typeof lastMessage === 'object' && lastMessage !== null) {
        const msgObj = lastMessage as RobotMessage;
        messageType = msgObj.type || '';
        messageData = msgObj.data || null;
      }
    } catch (error) {
      console.error("解析消息出錯:", error);
      return;
    }
    
    // 檢查是否是視頁幀消息
    if (messageType === "video_frame" && messageData && messageData.image) {
      // 檢查是否是新的視頁幀（根據時間戳）
      // Check if this is a new video frame (based on timestamp)
      const currentTimestamp = messageData.timestamp || Date.now();
      
      // 如果時間戳小於或等於上一個幀的時間戳，則跳過處理
      // Skip processing if timestamp is less than or equal to the last frame's timestamp
      if (currentTimestamp <= lastFrameTimestampRef.current) {
        console.log(`跳過處理舊的視頁幀 (時間戳: ${currentTimestamp}, 上一個: ${lastFrameTimestampRef.current})`);
        return;
      }
      
      // 更新最後一個視頁幀的時間戳
      // Update the timestamp of the last processed frame
      lastFrameTimestampRef.current = currentTimestamp;
      
      // 檢查人臉檢測信息
      if (messageData.face_detected) {
        console.log("收到人臉檢測信息:", {
          timestamp: currentTimestamp,
          face_detected: messageData.face_detected,
          face_x: messageData.face_x,
          face_y: messageData.face_y,
          recognized_person: messageData.recognized_person,
          confidence: messageData.confidence
        });
      }
      // 獲取畫布和上下文
      const canvas = canvasRef.current;
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        console.error("無法獲取畫布上下文");
        return;
      }

      // 創建新圖像並設置事件處理
      const img = new Image();
      
      // 設置圖像加載錯誤處理
      img.onerror = (err) => {
        console.error("圖像加載失敗:", err);
        // 顯示錯誤信息
        ctx.fillStyle = "#0a1520";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.font = "14px sans-serif";
        ctx.fillStyle = "#ff4040";
        ctx.textAlign = "center";
        ctx.fillText("視頻幀加載失敗", canvas.width / 2, canvas.height / 2);
        ctx.fillText("Video frame loading failed", canvas.width / 2, canvas.height / 2 + 20);
      };
      
      img.onload = () => {
        // 清除畫布
        ctx.fillStyle = "#0a1520";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // 應用縮放
        const scaledWidth = img.width * zoomLevel;
        const scaledHeight = img.height * zoomLevel;
        
        // 清除畫布後不需要額外的重置操作
        // No need for additional reset after clearing canvas
        
        // 計算圖像在畫布中的位置，保持縱橫比
        const imgRatio = scaledWidth / scaledHeight;
        const canvasRatio = canvas.width / canvas.height;
        let drawWidth, drawHeight, drawX, drawY;

        if (imgRatio > canvasRatio) {
          // 圖像較寬，以畫布寬度為基準
          drawWidth = canvas.width;
          drawHeight = canvas.width / imgRatio;
          drawX = 0;
          drawY = (canvas.height - drawHeight) / 2;
        } else {
          // 圖像較高，以畫布高度為基準
          drawHeight = canvas.height;
          drawWidth = canvas.height * imgRatio;
          drawX = (canvas.width - drawWidth) / 2;
          drawY = 0;
        }

        // 應用旋轉
        if (rotation !== 0) {
          // 保存當前繪圖狀態
          ctx.save();
          
          // 移動到畫布中心
          ctx.translate(canvas.width / 2, canvas.height / 2);
          
          // 旋轉畫布
          ctx.rotate(rotation * Math.PI / 180);
          
          // 繪製圖像，考慮中心點偏移
          try {
            ctx.drawImage(
              img, 
              -drawWidth / 2, 
              -drawHeight / 2, 
              drawWidth, 
              drawHeight
            );
          } catch (drawError) {
            console.error("繪製旋轉圖像時出錯:", drawError);
          }
          
          // 恢復繪圖狀態
          ctx.restore();
        } else {
          // 正常繪製圖像（無旋轉）
          try {
            ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
          } catch (drawError) {
            console.error("繪製圖像時出錯:", drawError);
          }
        }

        // 只在明確啟用人臉檢測功能且確實檢測到人臉時才繪製人臉框
        // Only draw face box when face detection is explicitly enabled and a face is actually detected
        if (faceDetectionActive && 
            messageData && 
            messageData.face_detected === true && 
            typeof messageData.face_x === 'number' && 
            typeof messageData.face_y === 'number' &&
            messageData.face_x >= 0 && messageData.face_x <= 1 &&
            messageData.face_y >= 0 && messageData.face_y <= 1) {
          
          // 添加更詳細的日誌記錄
          // Add more detailed logging
          console.log("繪製人臉框，詳細信息:", {
            timestamp: currentTimestamp,
            face_x: messageData?.face_x,
            face_y: messageData?.face_y,
            recognized: messageData?.recognized_person ? "是" : "否",
            person: messageData?.recognized_person || "未知",
            confidence: messageData?.confidence || 0
          });
          
          // 不需要清除和重繪，因為我們已經在上面繪製了圖像
          // No need to clear and redraw, as we already drew the image above
          
          // 計算人臉在畫布上的位置
          // Calculate face position on canvas
          const faceX = drawX + (messageData?.face_x || 0) * drawWidth;
          const faceY = drawY + (messageData?.face_y || 0) * drawHeight;
          
          // 繪製人臉框 (估計大小)
          // Draw face box (estimated size)
          const faceSize = Math.min(drawWidth, drawHeight) * 0.2; // 估計人臉大小為畫布的20% / Estimate face size as 20% of canvas
          
          // 只在有有效的人臉位置時才繪製框
          // Only draw box when there is a valid face position
          if (faceX >= drawX && faceX <= drawX + drawWidth && 
              faceY >= drawY && faceY <= drawY + drawHeight) {
            // 使用不同顏色標示已識別和未識別的人臉
            // Use different colors to mark recognized and unrecognized faces
            const isRecognized = !!messageData?.recognized_person;
            ctx.strokeStyle = isRecognized ? "#00ff00" : "#ff0000";
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.rect(faceX - faceSize/2, faceY - faceSize/2, faceSize, faceSize);
            ctx.stroke();
            
            // 合併顯示人臉識別標籤和座標信息
            // Merge display of face recognition label and coordinate information
            ctx.font = "12px monospace";
            ctx.fillStyle = "#ffffff";
            ctx.textAlign = "left";
            
            // 準備要顯示的文字
            // Prepare text to display
            let displayText = `X: ${messageData?.face_x?.toFixed(2) || '0.00'}, Y: ${messageData?.face_y?.toFixed(2) || '0.00'}`;
            
            // 如果有識別出的人，將人名和置信度也加入顯示文字
            // If there is a recognized person, add the name and confidence to the display text
            if (messageData?.recognized_person) {
              const confidence = typeof messageData?.confidence === 'number' ? messageData.confidence : 0;
              displayText = `${messageData.recognized_person} (${(confidence * 100).toFixed(1)}%) | ${displayText}`;
              
              // 已識別人臉使用綠色文字
              // Use green text for recognized faces
              ctx.fillStyle = "#00ff00";
            } else {
              // 未識別人臉使用白色文字
              // Use white text for unrecognized faces
              displayText = `Unknown | ${displayText}`;
            }
            
            // 在人臉框下方顯示文字
            ctx.fillText(
              displayText,
              faceX - faceSize/2,
              faceY + faceSize/2 + 15
            );
            
            // 時間戳和狀態信息會在下面的代碼中顯示
            // Time stamp and status information will be displayed in the code below
          }
        }
      }
        
        // 添加時間戳和狀態信息
        const now = new Date();
        const timeString = now.toLocaleTimeString();
        ctx.font = "12px monospace";
        ctx.fillStyle = "rgba(80, 190, 220, 0.8)";
        ctx.textAlign = "left";
        ctx.fillText(timeString, 10, canvas.height - 10);

        // 添加縮放和旋轉信息
        ctx.textAlign = "right";
        ctx.fillText(`Zoom: ${zoomLevel.toFixed(1)}x | Rotation: ${rotation}°`, canvas.width - 10, canvas.height - 10);
      }

      // 創建新圖像並設置事件處理
      const img = new Image();
      
      // 設置圖像加載錯誤處理
      img.onerror = (err) => {
        console.error("圖像加載失敗:", err);
        // 顯示錯誤信息
        ctx.fillStyle = "#0a1520";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.font = "14px sans-serif";
        ctx.fillStyle = "#ff4040";
        ctx.textAlign = "center";
        ctx.fillText("視頻幀加載失敗", canvas.width / 2, canvas.height / 2);
        ctx.fillText("Video frame loading failed", canvas.width / 2, canvas.height / 2 + 20);
      };
      
      // 設置圖像源為base64編碼的圖像
      try {
        // 確保messageData不為null且base64字符串有效
        if (messageData && typeof messageData.image === 'string' && messageData.image.length > 0) {
          const base64Str = messageData.image;
          if (base64Str.length > 10) { // 簡單的有效性檢查
            img.src = `data:image/jpeg;base64,${base64Str}`;
          } else {
            console.error("無效的Base64字符串，長度太短");
          }
        } else {
          console.error("無效的圖像數據類型");
        }
      } catch (error) {
        console.error("設置圖像源時出錯:", error);
      }
    }
  }, [lastMessage, videoActive, zoomLevel, rotation, faceDetectionActive]);

  const handleZoomIn = () => {
    setZoomLevel((prev) => Math.min(prev + 0.1, 2));
  };

  const handleZoomOut = () => {
    setZoomLevel((prev) => Math.max(prev - 0.1, 0.5));
  };

  const handleRotate = () => {
    setRotation((prev) => (prev + 45) % 360);
  };

  const toggleCamera = () => {
    setVideoActive(!videoActive);
    setStatusMessage(videoActive ? "Camera disabled" : "Camera enabled");
  };

  const handleRaiseHand = () => {
    setHandsUp(true);
    setStatusMessage("Hands raised");
  };

  const handleLowerHand = () => {
    setHandsUp(false);
    setStatusMessage("Hands lowered");
  };

  const handleOpenEyes = () => {
    setEyesOpen(true);
    setStatusMessage("Eyes opened");
  };

  const handleCloseEyes = () => {
    setEyesOpen(false);
    setStatusMessage("Eyes closed");
  };

  const handleClearAlarm = () => {
    console.log('發送解除警報命令');
    
    // 發送解除警報命令到後端
    sendCommand({
      type: 'clear_alarm',
      data: {}
    });
    
    setAlarmActive(false);
    setStatusMessage('警報已解除');
  };

  const handlePowerOff = () => {
    setStatusMessage("Powering off...");
    // In a real app, this would trigger a shutdown sequence
  };

  const toggleFaceDetection = () => {
    const newState = !faceDetectionActive;
    setFaceDetectionActive(newState);
    
    // 發送命令到後端
    sendCommand({
      type: newState ? 'start_face_detection' : 'stop_face_detection',
      data: {}
    });
    
    setStatusMessage(newState ? "人臉檢測已啟動" : "人臉檢測已停止");
  };

  return (
    <main className="flex min-h-screen flex-col items-center p-4 bg-[#050a10] text-white grid-bg">
      <Navigation />
      <Card className="w-full max-w-2xl h-[600px] bg-[#0a1520] border-[#50bedc]/30 p-6 flex flex-col mt-4">
        <div className="flex justify-between items-center mb-4">
          <div className="text-[#50bedc] text-sm">CAMERA FEED</div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleZoomIn}
            >
              <Maximize className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleZoomOut}
            >
              <Minimize className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleRotate}
            >
              <RotateCw className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className={`${faceDetectionActive ? "border-red-500/30 text-red-400" : "border-[#50bedc]/30 text-[#50bedc]"} h-8 w-8`}
              onClick={toggleFaceDetection}
              disabled={!videoActive}
              title="人臉識別"
            >
              {faceDetectionActive ? <UserCheck className="h-4 w-4" /> : <UserRound className="h-4 w-4" />}
            </Button>
            <Button
              variant="outline"
              size="icon"
              className={`${videoActive ? "border-[#50bedc]/30 text-[#50bedc]" : "border-red-500/30 text-red-400"} h-8 w-8`}
              onClick={toggleCamera}
            >
              {videoActive ? <Video className="h-4 w-4" /> : <VideoOff className="h-4 w-4" />}
            </Button>
          </div>
        </div>

        <div className="relative flex-grow mb-4 border border-[#50bedc]/30 overflow-hidden rounded-md">
          {videoActive ? (
            <canvas ref={canvasRef} width={800} height={400} className="w-full h-full object-cover" />
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-[#0a1520]">
              <VideoOff className="h-16 w-16 text-[#50bedc]/50" />
              <p className="text-[#50bedc]/50 absolute bottom-4 left-0 right-0 text-center">Video feed disabled</p>
            </div>
          )}

          <div className="absolute top-2 right-2 flex items-center gap-2 bg-[#0a1520]/80 px-2 py-1 rounded">
            <div className={`h-2 w-2 rounded-full ${videoActive ? "bg-red-500 animate-pulse" : "bg-gray-500"}`}></div>
            <span className={`text-xs ${videoActive ? "text-red-400" : "text-gray-400"}`}>
              {videoActive ? "REC" : "OFF"}
            </span>
          </div>
        </div>

        {/* Robot control buttons */}
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div className="grid grid-cols-3 gap-2">
            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleRaiseHand}
            >
              <div className="flex flex-col items-center">
                <HandMetal className="h-4 w-4 mb-1" />
                <span className="text-xs">Raise</span>
              </div>
            </Button>

            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleLowerHand}
            >
              <div className="flex flex-col items-center">
                <ArrowDown className="h-4 w-4 mb-1" />
                <span className="text-xs">Lower</span>
              </div>
            </Button>

            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleOpenEyes}
            >
              <div className="flex flex-col items-center">
                <Eye className="h-4 w-4 mb-1" />
                <span className="text-xs">Open</span>
              </div>
            </Button>
          </div>

          <div className="grid grid-cols-3 gap-2">
            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleCloseEyes}
            >
              <div className="flex flex-col items-center">
                <EyeOff className="h-4 w-4 mb-1" />
                <span className="text-xs">Close</span>
              </div>
            </Button>

            <Button 
              className={`${alarmActive ? 'bg-[#251520] hover:bg-[#352530] text-red-400' : 'bg-[#0a1520] hover:bg-[#152535] text-[#50bedc]'} control-button p-1`}
              onClick={handleClearAlarm}
              disabled={!alarmActive}
            >
              <div className="flex flex-col items-center">
                <AlertTriangle className={`h-4 w-4 mb-1 ${alarmActive ? 'animate-pulse' : ''}`} />
                <span className="text-xs">{alarmActive ? '解除警報' : '無警報'}</span>
              </div>
            </Button>

            <Button
              className="bg-[#1a1520] hover:bg-[#251520] text-red-400 border-red-500/30 control-button p-1"
              onClick={handlePowerOff}
            >
              <div className="flex flex-col items-center">
                <Power className="h-4 w-4 mb-1" />
                <span className="text-xs">Power</span>
              </div>
            </Button>
          </div>
        </div>

        {/* Movement control buttons */}
        <div className="grid grid-cols-3 gap-4">
          <div className="col-span-3">
            <div className="grid grid-cols-3 gap-2">
              <div></div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowUp className="h-5 w-5" />
              </Button>
              <div></div>

              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowLeft className="h-5 w-5" />
              </Button>
              <div className="flex items-center justify-center text-[#50bedc]/70 text-xs">MOVE</div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowRight className="h-5 w-5" />
              </Button>

              <div></div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowDown className="h-5 w-5" />
              </Button>
              <div></div>
            </div>
          </div>
        </div>
      </Card>
    </main>
  )
}
