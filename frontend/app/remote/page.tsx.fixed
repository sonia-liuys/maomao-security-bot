"use client"

import { useState, useRef, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Power,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  Video,
  VideoOff,
  Maximize,
  Minimize,
  RotateCw,
  HandMetal,
  Eye,
  EyeOff,
  Clock,
  Scan,
  User,
  Square,
  Zap,
  ZapOff,
  Palette
} from "lucide-react"
import Navigation from "@/components/navigation"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import useRobotConnection from "@/hooks/useRobotConnection"
import { AlertTriangle } from "lucide-react"

// 定義消息類型介面
interface RobotMessage {
  type: string;
  data?: {
    image?: string;
    timestamp?: number;
    width?: number;
    height?: number;
    alarm_active?: boolean;
    eye_color?: string;
    message?: string;
    recognized_person?: string;
    confidence?: number;
    emoji?: string;
    face_detected?: boolean;
    face_x?: number;
    face_y?: number;
    [key: string]: any;
  };
  id?: string;
}

export default function RemoteMode() {
  const [videoActive, setVideoActive] = useState(true)
  const [zoomLevel, setZoomLevel] = useState(1)
  const [rotation, setRotation] = useState(0)
  const [handsUp, setHandsUp] = useState(false)
  const [eyesOpen, setEyesOpen] = useState(true)
  const [alarmActive, setAlarmActive] = useState(false)
  const [statusMessage, setStatusMessage] = useState("Ready to assist")
  const [faceDetectionActive, setFaceDetectionActive] = useState(false)
  const [laserActive, setLaserActive] = useState(false)
  const [currentEyeColor, setCurrentEyeColor] = useState("green")
  const [isMoving, setIsMoving] = useState(false)
  const [movementDirection, setMovementDirection] = useState("") // "forward", "backward", "left", "right"
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  const { isConnected, setRobotMode, sendCommand, lastMessage, robotStatus } = useRobotConnection()
  // 將lastMessage轉換為RobotMessage類型
  const typedLastMessage = lastMessage as RobotMessage | null
  // 使用ref追蹤是否已經發送過命令
  const hasSentCommandRef = useRef(false)
  
  // 切換到手動模式並啟動視頻流
  useEffect(() => {
    console.log("連接狀態:", isConnected, "是否已發送命令:", hasSentCommandRef.current);
    
    // 如果連接已建立且尚未發送過命令
    if (isConnected && !hasSentCommandRef.current) {
      console.log("準備發送命令...");
      
      // 添加延遲，確保連接已完全建立
      const timer = setTimeout(() => {
        try {
          console.log("開始發送命令");
          
          // 切換到手動模式
          setRobotMode("MANUAL");
          console.log("切換到手動模式");
          
          // 啟動視頻流
          if (videoActive) {
            console.log("發送啟動視頻流命令");
            const result = sendCommand({
              type: "start_video_stream",
              data: {}
            });
            console.log("視頻流命令發送結果:", result);
          } else {
            console.log("視頻未啟用，不發送視頻流命令");
          }
          
          hasSentCommandRef.current = true;
          console.log("命令已發送標記已設置");
        } catch (error) {
          console.error("設置模式失敗:", error);
        }
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [isConnected, setRobotMode, videoActive, sendCommand]);
  
  // 監聽最後收到的消息，檢查警報狀態
  useEffect(() => {
    if (!lastMessage) return;
    
    try {
      // 使用類型斷言來確保 TypeScript 知道 lastMessage 的類型
      const message = lastMessage as RobotMessage;
      
      // 檢查是否是狀態更新消息
      if (message.type === 'status_update' && message.data && message.data.alarm_active !== undefined) {
        setAlarmActive(message.data.alarm_active);
        console.log(`警報狀態更新: ${message.data.alarm_active ? '活躍' : '非活躍'}`);
      }
      
      // 檢查是否是警報消息
      if (message.type === 'alarm' || 
          (message.type === 'status_update' && 
           message.data && 
           message.data.eye_color === 'red')) {
        setAlarmActive(true);
      }
    } catch (error) {
      console.error("處理消息時出錯:", error);
    }
  }, [lastMessage]);
  
  // 處理視頻流消息
  useEffect(() => {
    if (!lastMessage || !videoActive) return;
    
    try {
      // 使用類型斷言來確保 TypeScript 知道 lastMessage 的類型
      const messageData = (lastMessage as RobotMessage).data;
      
      if (messageData && messageData.image) {
        const canvas = canvasRef.current;
        if (!canvas) {
          console.error("Canvas element not found");
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error("Could not get 2D context from canvas");
          return;
        }
        
        // 創建新圖像
        const img = new Image();
        
        // 設置圖像加載錯誤處理
        img.onerror = (err) => {
          console.error("圖像加載錯誤:", err);
          
          // 顯示錯誤信息
          ctx.fillStyle = "#0a1520";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          ctx.fillStyle = "#ff0000";
          ctx.font = "14px Arial";
          ctx.textAlign = "center";
          ctx.fillText("圖像加載錯誤", canvas.width / 2, canvas.height / 2);
        };
        
        img.onload = () => {
          // 清除畫布
          ctx.fillStyle = "#0a1520";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          // 應用縮放
          const scaledWidth = img.width * zoomLevel;
          const scaledHeight = img.height * zoomLevel;
          
          // 計算居中位置
          const x = (canvas.width - scaledWidth) / 2;
          const y = (canvas.height - scaledHeight) / 2;
          
          // 如果有旋轉
          if (rotation !== 0) {
            // 保存當前狀態
            ctx.save();
            
            // 移動到畫布中心
            ctx.translate(canvas.width / 2, canvas.height / 2);
            
            // 旋轉
            ctx.rotate(rotation * Math.PI / 180);
            
            // 繪製圖像（從中心點偏移）
            ctx.drawImage(
              img,
              -scaledWidth / 2,
              -scaledHeight / 2,
              scaledWidth,
              scaledHeight
            );
            
            // 恢復狀態
            ctx.restore();
          } else {
            // 無旋轉時直接繪製
            ctx.drawImage(img, x, y, scaledWidth, scaledHeight);
          }
          
          // 如果有人臉檢測數據，繪製人臉框
          if (messageData.face_detected && messageData.face_x !== undefined && messageData.face_y !== undefined) {
            // 計算人臉位置（考慮縮放和旋轉）
            const faceX = messageData.face_x * canvas.width;
            const faceY = messageData.face_y * canvas.height;
            
            // 繪製人臉框
            ctx.strokeStyle = messageData.recognized_person ? "#00ff00" : "#ff0000";
            ctx.lineWidth = 2;
            
            // 簡單的人臉框（50x50像素）
            const faceSize = 50 * zoomLevel;
            ctx.strokeRect(faceX - faceSize/2, faceY - faceSize/2, faceSize, faceSize);
            
            // 如果有識別出的人，顯示名稱
            if (messageData.recognized_person) {
              ctx.fillStyle = "#00ff00";
              ctx.font = "16px Arial";
              ctx.textAlign = "center";
              ctx.fillText(
                `${messageData.recognized_person} (${Math.round(messageData.confidence || 0)}%)`,
                faceX,
                faceY - faceSize/2 - 10
              );
            } else {
              ctx.fillStyle = "#ff0000";
              ctx.font = "16px Arial";
              ctx.textAlign = "center";
              ctx.fillText("未知人員", faceX, faceY - faceSize/2 - 10);
            }
          }
          
          // 如果有表情符號，顯示在畫面上
          if (messageData.emoji) {
            ctx.font = "60px Arial";
            ctx.textAlign = "center";
            ctx.fillText(
              messageData.emoji,
              canvas.width - 50,
              50
            );
          }
        };
        
        // 設置圖像源為base64編碼的圖像
        try {
          // 確保base64字符串有效
          if (typeof messageData.image === 'string' && messageData.image.length > 0) {
            const base64Str = messageData.image;
            if (base64Str.startsWith('data:image')) {
              img.src = base64Str;
            } else {
              img.src = `data:image/jpeg;base64,${base64Str}`;
            }
          } else {
            console.error("無效的圖像數據類型");
          }
        } catch (error) {
          console.error("設置圖像源時出錯:", error);
        }
      }
    } catch (error) {
      console.error("處理視頻流消息時出錯:", error);
    }
  }, [lastMessage, videoActive, zoomLevel, rotation]);
  
  const handleZoomIn = () => {
    setZoomLevel(prev => Math.min(prev + 0.1, 2))
  }
  
  const handleZoomOut = () => {
    setZoomLevel(prev => Math.max(prev - 0.1, 0.5))
  }
  
  const handleRotate = () => {
    setRotation((prev) => (prev + 45) % 360)
  }
  
  const handleRaiseHand = () => {
    setHandsUp(true)
    setStatusMessage("Hands raised")
    
    // Send command to backend
    if (isConnected) {
      sendCommand({
        type: "raise_arms",
        data: {}
      })
    }
  }

  const handleLowerHand = () => {
    setHandsUp(false)
    setStatusMessage("Hands lowered")
    
    // Send command to backend
    if (isConnected) {
      sendCommand({
        type: "lower_arms",
        data: {}
      })
    }
  }

  const handleOpenEyes = () => {
    setEyesOpen(true)
    setStatusMessage("Eyes opened")
    
    // Send command to backend
    if (isConnected) {
      sendCommand({
        type: "open_eyelids",
        data: {}
      })
    }
  }

  const handleCloseEyes = () => {
    setEyesOpen(false)
    setStatusMessage("Eyes closed")
    
    // Send command to backend
    if (isConnected) {
      sendCommand({
        type: "close_eyelids",
        data: {}
      })
    }
  }

  const toggleCamera = () => {
    setVideoActive(!videoActive)
    setStatusMessage(videoActive ? "Camera disabled" : "Camera enabled")
  }
  
  const handleClearAlarm = () => {
    console.log('發送解除警報命令');
    
    // 發送解除警報命令到後端
    sendCommand({
      type: 'clear_alarm',
      data: {}
    });
    
    setAlarmActive(false);
    setStatusMessage('警報已解除');
  }

  const handlePowerOff = () => {
    setStatusMessage("Powering off...")
    // In a real app, this would trigger a shutdown sequence
  }
  
  // 雷射控制
  const toggleLaser = () => {
    setLaserActive(!laserActive);
    
    // 發送雷射控制命令到後端
    sendCommand({
      type: laserActive ? 'deactivate_laser' : 'activate_laser',
      data: {}
    });
    
    setStatusMessage(laserActive ? '雷射已關閉' : '雷射已啟動');
  }
  
  // 眼睛顏色控制
  const changeEyeColor = (color: string) => {
    setCurrentEyeColor(color);
    
    // 發送眼睛顏色控制命令到後端
    sendCommand({
      type: 'set_eye_color',
      data: {
        color: color
      }
    });
    
    setStatusMessage(`眼睛顏色已設為${color}`);
  }
  
  // 連續移動控制
  const startMoving = (direction: string) => {
    setIsMoving(true);
    setMovementDirection(direction);
    
    // 發送連續移動命令到後端
    sendCommand({
      type: 'move',
      data: {
        direction: direction,
        continuous: true
      }
    });
    
    setStatusMessage(`開始${getDirectionText(direction)}`);
  }
  
  const stopMoving = () => {
    setIsMoving(false);
    setMovementDirection("");
    
    // 發送停止移動命令到後端
    sendCommand({
      type: 'move',
      data: {
        direction: 'stop',
        continuous: false
      }
    });
    
    setStatusMessage('已停止移動');
  }
  
  // 獲取方向文字描述
  const getDirectionText = (direction: string) => {
    switch (direction) {
      case 'forward': return '前進';
      case 'backward': return '後退';
      case 'left': return '左轉';
      case 'right': return '右轉';
      default: return '移動';
    }
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-4 bg-black text-white">
      <Navigation />
      
      <Card className="w-full max-w-md bg-black border-[#50bedc]/30 text-white">
        <div className="p-4 space-y-4">
          {/* Video feed */}
          <div className="relative border border-[#50bedc]/30 rounded-md overflow-hidden bg-[#0a1520] aspect-video">
            <canvas 
              ref={canvasRef} 
              width={640} 
              height={360} 
              className="w-full h-full object-cover"
            />
            
            {/* Video controls overlay */}
            <div className="absolute top-2 right-2 flex space-x-2">
              <Button 
                variant="outline" 
                size="icon" 
                className="h-6 w-6 bg-black/50 border-[#50bedc]/30 text-[#50bedc]"
                onClick={toggleCamera}
              >
                {videoActive ? <VideoOff className="h-3 w-3" /> : <Video className="h-3 w-3" />}
              </Button>
              
              <Button 
                variant="outline" 
                size="icon" 
                className="h-6 w-6 bg-black/50 border-[#50bedc]/30 text-[#50bedc]"
                onClick={handleZoomIn}
              >
                <Maximize className="h-3 w-3" />
              </Button>
              
              <Button 
                variant="outline" 
                size="icon" 
                className="h-6 w-6 bg-black/50 border-[#50bedc]/30 text-[#50bedc]"
                onClick={handleZoomOut}
              >
                <Minimize className="h-3 w-3" />
              </Button>
              
              <Button 
                variant="outline" 
                size="icon" 
                className="h-6 w-6 bg-black/50 border-[#50bedc]/30 text-[#50bedc]"
                onClick={handleRotate}
              >
                <RotateCw className="h-3 w-3" />
              </Button>
            </div>
            
            {/* Recording indicator */}
            <div className="absolute bottom-2 left-2 flex items-center space-x-1 bg-black/50 px-2 py-1 rounded text-xs">
              <div className={`w-2 h-2 rounded-full ${videoActive ? "bg-red-500 animate-pulse" : "bg-gray-500"}`}></div>
              <span className={`text-xs ${videoActive ? "text-red-400" : "text-gray-400"}`}>
                {videoActive ? "REC" : "OFF"}
              </span>
            </div>
          </div>

          {/* Robot control buttons */}
          <div className="grid grid-cols-3 gap-4 mb-4">
            {/* Original controls (smaller) */}
            <div className="grid grid-cols-3 gap-1">
              <Button
                className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
                onClick={handleRaiseHand}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <HandMetal className="h-3 w-3 mb-1" />
                  <span className="text-[10px]">Raise</span>
                </div>
              </Button>

              <Button
                className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
                onClick={handleLowerHand}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <ArrowDown className="h-3 w-3 mb-1" />
                  <span className="text-[10px]">Lower</span>
                </div>
              </Button>

              <Button
                className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
                onClick={handleOpenEyes}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <Eye className="h-3 w-3 mb-1" />
                  <span className="text-[10px]">Open</span>
                </div>
              </Button>

              <Button
                className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
                onClick={handleCloseEyes}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <EyeOff className="h-3 w-3 mb-1" />
                  <span className="text-[10px]">Close</span>
                </div>
              </Button>

              <Button
                className={`${alarmActive ? 'bg-[#251520] hover:bg-[#352530] text-red-400' : 'bg-[#0a1520] hover:bg-[#152535] text-[#50bedc]'} control-button p-1`}
                onClick={handleClearAlarm}
                disabled={!alarmActive}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <AlertTriangle className={`h-3 w-3 mb-1 ${alarmActive ? 'animate-pulse' : ''}`} />
                  <span className="text-[10px]">{alarmActive ? '解除警報' : '無警報'}</span>
                </div>
              </Button>

              <Button
                className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
                onClick={handlePowerOff}
                size="sm"
              >
                <div className="flex flex-col items-center">
                  <Power className="h-3 w-3 mb-1" />
                  <span className="text-[10px]">Power</span>
                </div>
              </Button>
            </div>

            {/* Eye color controls */}
            <div className="flex flex-col space-y-1">
              <div className="text-[#50bedc] text-xs mb-1">眼睛顏色</div>
              <div className="grid grid-cols-2 gap-1">
                <Button
                  className={`${currentEyeColor === 'red' ? 'bg-red-700' : 'bg-red-600'} hover:bg-red-700 text-white p-1 h-8`}
                  onClick={() => changeEyeColor('red')}
                >
                  <div className="flex items-center justify-center w-full">
                    <div className="h-3 w-3 rounded-full bg-red-400 mr-1"></div>
                    <span className="text-xs">紅</span>
                  </div>
                </Button>

                <Button
                  className={`${currentEyeColor === 'yellow' ? 'bg-yellow-700' : 'bg-yellow-600'} hover:bg-yellow-700 text-white p-1 h-8`}
                  onClick={() => changeEyeColor('yellow')}
                >
                  <div className="flex items-center justify-center w-full">
                    <div className="h-3 w-3 rounded-full bg-yellow-400 mr-1"></div>
                    <span className="text-xs">黃</span>
                  </div>
                </Button>

                <Button
                  className={`${currentEyeColor === 'blue' ? 'bg-blue-700' : 'bg-blue-600'} hover:bg-blue-700 text-white p-1 h-8`}
                  onClick={() => changeEyeColor('blue')}
                >
                  <div className="flex items-center justify-center w-full">
                    <div className="h-3 w-3 rounded-full bg-blue-400 mr-1"></div>
                    <span className="text-xs">藍</span>
                  </div>
                </Button>

                <Button
                  className={`${currentEyeColor === 'green' ? 'bg-green-700' : 'bg-green-600'} hover:bg-green-700 text-white p-1 h-8`}
                  onClick={() => changeEyeColor('green')}
                >
                  <div className="flex items-center justify-center w-full">
                    <div className="h-3 w-3 rounded-full bg-green-400 mr-1"></div>
                    <span className="text-xs">綠</span>
                  </div>
                </Button>
              </div>

              {/* Laser control */}
              <div className="mt-2">
                <Button
                  className={`${laserActive ? 'bg-red-700 hover:bg-red-800' : 'bg-[#0a1520] hover:bg-[#152535]'} text-white p-1 w-full`}
                  onClick={toggleLaser}
                >
                  <div className="flex items-center justify-center w-full">
                    {laserActive ? (
                      <>
                        <Zap className="h-4 w-4 mr-2 text-yellow-400" />
                        <span className="text-xs">關閉雷射</span>
                      </>
                    ) : (
                      <>
                        <ZapOff className="h-4 w-4 mr-2" />
                        <span className="text-xs">開啟雷射</span>
                      </>
                    )}
                  </div>
                </Button>
              </div>
            </div>

            {/* Status display */}
            <div className="flex flex-col justify-center items-center">
              <div className="text-[#50bedc] text-xs mb-1">狀態</div>
              <div className="bg-[#0a1520] border border-[#50bedc]/30 rounded p-2 w-full h-full flex items-center justify-center">
                <p className="text-[#50bedc] text-xs text-center">{statusMessage}</p>
              </div>
            </div>
          </div>

          {/* Movement control buttons */}
          <div className="grid grid-cols-3 gap-4">
            <div className="col-span-3">
              <div className="grid grid-cols-3 gap-2">
                <div></div>
                <Button 
                  className={`${movementDirection === 'forward' ? 'bg-[#152535]' : 'bg-[#0a1520]'} hover:bg-[#152535] text-[#50bedc] control-button`}
                  onClick={() => startMoving('forward')}
                >
                  <ArrowUp className="h-5 w-5" />
                </Button>
                <div></div>

                <Button 
                  className={`${movementDirection === 'left' ? 'bg-[#152535]' : 'bg-[#0a1520]'} hover:bg-[#152535] text-[#50bedc] control-button`}
                  onClick={() => startMoving('left')}
                >
                  <ArrowLeft className="h-5 w-5" />
                </Button>
                <Button 
                  className={`${isMoving ? 'bg-red-700 hover:bg-red-800 text-white' : 'bg-[#0a1520] hover:bg-[#152535] text-[#50bedc]'} control-button`}
                  onClick={stopMoving}
                >
                  <Square className="h-5 w-5" />
                  <span className="sr-only">停止</span>
                </Button>
                <Button 
                  className={`${movementDirection === 'right' ? 'bg-[#152535]' : 'bg-[#0a1520]'} hover:bg-[#152535] text-[#50bedc] control-button`}
                  onClick={() => startMoving('right')}
                >
                  <ArrowRight className="h-5 w-5" />
                </Button>

                <div></div>
                <Button 
                  className={`${movementDirection === 'backward' ? 'bg-[#152535]' : 'bg-[#0a1520]'} hover:bg-[#152535] text-[#50bedc] control-button`}
                  onClick={() => startMoving('backward')}
                >
                  <ArrowDown className="h-5 w-5" />
                </Button>
                <div></div>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </main>
  )
}
