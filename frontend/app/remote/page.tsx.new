"use client"

import { useState, useRef, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Power,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  Video,
  VideoOff,
  Maximize,
  Minimize,
  RotateCw,
  HandMetal,
  Eye,
  EyeOff,
  Clock,
  UserRound,
  UserCheck
} from "lucide-react"
import Navigation from "@/components/navigation"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import useRobotConnection from "@/hooks/useRobotConnection"
import { AlertTriangle } from "lucide-react"
import FaceCoordinatesTable from "@/components/face-coordinates-table"

// 定義消息類型介面
interface RobotMessage {
  type: string;
  data?: {
    image?: string;
    timestamp?: number;
    width?: number;
    height?: number;
    alarm_active?: boolean;
    eye_color?: string;
    message?: string;
    recognized_person?: string;
    confidence?: number;
    emoji?: string;
    faces?: any[];
    [key: string]: any;
  };
  id?: string;
}

export default function RemoteMode() {
  const [videoActive, setVideoActive] = useState(true)
  const [zoomLevel, setZoomLevel] = useState(1)
  const [rotation, setRotation] = useState(0)
  const [handsUp, setHandsUp] = useState(false)
  const [eyesOpen, setEyesOpen] = useState(true)
  const [alarmActive, setAlarmActive] = useState(false)
  const [statusMessage, setStatusMessage] = useState("Ready to assist")
  const [faceDetectionActive, setFaceDetectionActive] = useState(false)
  const [detectedFaces, setDetectedFaces] = useState<{name: string, confidence: number, x: number, y: number, width: number, height: number}[]>([])
  const [showCoordinates, setShowCoordinates] = useState(true) // 是否显示坐标表
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  const { isConnected, setRobotMode, sendCommand, lastMessage } = useRobotConnection()
  // 將lastMessage轉換為RobotMessage類型
  const typedLastMessage = lastMessage as RobotMessage | null
  // 使用ref追蹤是否已經發送過命令
  const hasSentCommandRef = useRef(false)
  
  // 切換到手動模式並啟動視頻流
  useEffect(() => {
    console.log("連接狀態:", isConnected, "是否已發送命令:", hasSentCommandRef.current);
    
    // 如果連接已建立且尚未發送過命令
    if (isConnected && !hasSentCommandRef.current) {
      console.log("準備發送命令...");
      
      // 添加延遲，確保連接已完全建立
      const timer = setTimeout(() => {
        try {
          console.log("開始發送命令");
          
          // 切換到手動模式
          setRobotMode("MANUAL");
          console.log("切換到手動模式");
          
          // 啟動視頻流
          if (videoActive) {
            console.log("發送啟動視頻流命令");
            const result = sendCommand({
              type: "start_video_stream",
              data: {}
            });
            console.log("視頻流命令發送結果:", result);
          } else {
            console.log("視頻未啟用，不發送視頻流命令");
          }
          
          hasSentCommandRef.current = true;
          console.log("命令已發送標記已設置");
        } catch (error) {
          console.error("設置模式失敗:", error);
        }
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [isConnected, setRobotMode, videoActive, sendCommand])
  
  // 監聽最後收到的消息，檢查警報狀態和人臉識別結果
  useEffect(() => {
    if (!lastMessage) return;
    
    try {
      // 使用類型斷言來確保 TypeScript 知道 lastMessage 的類型
      const message = lastMessage as RobotMessage;
      
      console.log('收到消息類型:', message.type);
      
      // 檢查是否是狀態更新消息
      if (message.type === 'status_update' && message.data && message.data.alarm_active !== undefined) {
        setAlarmActive(message.data.alarm_active);
        console.log(`警報狀態更新: ${message.data.alarm_active ? '活躍' : '非活躍'}`);
      }
      
      // 檢查是否是識別結果消息，並且眼睛顏色為紅色
      if (message.type === 'recognition_result' && 
          message.data && 
          message.data.eye_color === 'red') {
        setAlarmActive(true);
        console.log('收到紅色警報狀態');
      }
      
      // 檢查是否是人臉識別結果消息
      if (message.type === 'face_detection_result' && message.data && message.data.faces) {
        try {
          const faces = message.data.faces as {name: string, confidence: number, x: number, y: number, width: number, height: number}[];
          console.log('收到人臉識別結果:', faces);
          
          // 確保所有人臉数据都有正确的属性
          const validFaces = faces.filter(face => {
            return face && 
                   typeof face.x === 'number' && 
                   typeof face.y === 'number' && 
                   typeof face.width === 'number' && 
                   typeof face.height === 'number';
          });
          
          console.log('有效的人臉数据:', validFaces.length);
          setDetectedFaces(validFaces);
          
          // 確保人臉檢測功能已啟用
          if (!faceDetectionActive && validFaces.length > 0) {
            setFaceDetectionActive(true);
            console.log('自動啟用人臉檢測功能，因為收到了有效的人臉檢測結果');
          }
        } catch (faceError) {
          console.error('處理人臉檢測結果時出錯:', faceError);
        }
      }
    } catch (error) {
      console.error('處理消息時出錯:', error);
    }
  }, [lastMessage, faceDetectionActive])

  // 處理視頻流
  useEffect(() => {
    console.log("視頻流效果觸發，狀態:", {
      videoActive,
      isConnected,
      canvasExists: !!canvasRef.current
    });
    
    if (!canvasRef.current || !videoActive) {
      console.log("視頻流初始化跳過: ", !canvasRef.current ? "canvas不存在" : "視頻未啟用");
      return;
    }

    if (!isConnected) {
      console.log("視頻流初始化跳過: WebSocket未連接");
      return;
    }

    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) {
      console.error("無法獲取canvas上下文");
      return;
    }

    // 初始化畫布，顯示等待連接的訊息
    ctx.fillStyle = "#0a1520";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.font = "14px sans-serif";
    ctx.fillStyle = "#40a0ff";
    ctx.textAlign = "center";
    ctx.fillText("正在連接視頻流...", canvas.width / 2, canvas.height / 2);
    ctx.fillText("Connecting to video stream...", canvas.width / 2, canvas.height / 2 + 20);

    // 如果已連接，發送開始視頻流命令
    console.log("準備發送開始視頻流命令，連接狀態:", isConnected ? "已連接" : "未連接");
    
    // 直接發送一次視頻流命令，不等待
    if (isConnected) {
      sendCommand({
        type: "start_video_stream",
        data: {}
      });
      console.log("已發送開始視頻流命令");
    }

    // 創建圖像對象
    const img = new Image()
    
    // 設置圖像加載錯誤處理
    img.onerror = (err) => {
      console.error("圖像加載失敗:", err);
      
      // 清除畫布
      ctx.fillStyle = "#0a1520";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // 顯示錯誤訊息
      ctx.font = "14px sans-serif";
      ctx.fillStyle = "#ff4040";
      ctx.textAlign = "center";
      ctx.fillText("視頻流加載失敗", canvas.width / 2, canvas.height / 2);
      ctx.fillText("Video stream failed to load", canvas.width / 2, canvas.height / 2 + 20);
    }
    
    // 設置圖像加載成功處理
    img.onload = () => {
      // 清除畫布
      ctx.fillStyle = "#0a1520";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // 計算縮放和旋轉
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      // 保存當前狀態
      ctx.save();
      
      // 移動到中心點
      ctx.translate(centerX, centerY);
      
      // 縮放
      ctx.scale(zoomLevel, zoomLevel);
      
      // 旋轉
      ctx.rotate(rotation * Math.PI / 180);
      
      // 繪製圖像，居中
      const scaledWidth = img.width * zoomLevel;
      const scaledHeight = img.height * zoomLevel;
      ctx.drawImage(img, -img.width / 2, -img.height / 2);
      
      // 恢復狀態
      ctx.restore();
      
      // 如果人臉檢測已啟用且有檢測到的人臉，繪製人臉框
      if (faceDetectionActive && detectedFaces.length > 0) {
        // 計算縮放比例
        const scaleX = canvas.width / img.width;
        const scaleY = canvas.height / img.height;
        const scale = Math.min(scaleX, scaleY);
        
        // 計算居中偏移
        const offsetX = (canvas.width - img.width * scale) / 2;
        const offsetY = (canvas.height - img.height * scale) / 2;
        
        // 繪製每個人臉框
        detectedFaces.forEach(face => {
          // 設置紅色邊框
          ctx.strokeStyle = "red";
          ctx.lineWidth = 2;
          
          // 計算縮放後的位置和大小
          const x = face.x * scale + offsetX;
          const y = face.y * scale + offsetY;
          const width = face.width * scale;
          const height = face.height * scale;
          
          // 繪製邊框
          ctx.strokeRect(x, y, width, height);
          
          // 設置文字背景
          ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
          ctx.fillRect(x, y - 20, width, 20);
          
          // 設置文字
          ctx.font = "12px sans-serif";
          ctx.fillStyle = "white";
          ctx.textAlign = "left";
          
          // 顯示名稱和置信度
          const confidencePercent = Math.round(face.confidence * 100);
          const displayText = `${face.name || "Unknown"} (${confidencePercent}%)`;
          ctx.fillText(displayText, x + 5, y - 5);
        });
      }
      
      // 繪製狀態信息
      ctx.textAlign = "right";
      ctx.fillStyle = "white";
      ctx.font = "12px sans-serif";
      ctx.fillText(statusMessage, canvas.width - 10, canvas.height - 10);
    }
    
    // 監聽最後收到的消息
    const handleMessage = (message: RobotMessage) => {
      if (message.type === "video_frame" && message.data && message.data.image) {
        img.src = `data:image/jpeg;base64,${message.data.image}`;
      }
    }
    
    // 添加消息監聽器
    const intervalId = setInterval(() => {
      if (typedLastMessage && typedLastMessage.type === "video_frame") {
        handleMessage(typedLastMessage);
      }
    }, 30);
    
    // 清理函數
    return () => {
      clearInterval(intervalId);
    }
  }, [videoActive, isConnected, zoomLevel, rotation, faceDetectionActive, detectedFaces, statusMessage, typedLastMessage, sendCommand])
  
  // 縮放控制
  const handleZoomIn = () => {
    setZoomLevel(prev => Math.min(prev + 0.1, 2))
  }
  
  const handleZoomOut = () => {
    setZoomLevel(prev => Math.max(prev - 0.1, 0.5))
  }
  
  const handleRotate = () => {
    setRotation(prev => (prev + 90) % 360)
  }
  
  // 切換視頻流
  const toggleCamera = () => {
    if (videoActive) {
      // 停止視頻流
      sendCommand({
        type: "stop_video_stream",
        data: {}
      });
      setVideoActive(false);
      console.log("視頻流已停止");
    } else {
      // 啟動視頻流
      sendCommand({
        type: "start_video_stream",
        data: {}
      });
      setVideoActive(true);
      console.log("視頻流已啟動");
    }
  }
  
  // 切換人臉檢測
  const toggleFaceDetection = () => {
    if (faceDetectionActive) {
      // 停止人臉檢測
      sendCommand({
        type: "toggle_face_detection",
        data: {
          enabled: false
        }
      });
      setFaceDetectionActive(false);
      console.log("人臉檢測已停止");
    } else {
      // 啟動人臉檢測
      sendCommand({
        type: "toggle_face_detection",
        data: {
          enabled: true
        }
      });
      setFaceDetectionActive(true);
      console.log("人臉檢測已啟動");
    }
  }
  
  const handleRaiseHand = () => {
    setHandsUp(true)
  }
  
  const handleLowerHand = () => {
    setHandsUp(false)
  }
  
  const handleOpenEyes = () => {
    setEyesOpen(true)
  }
  
  const handleCloseEyes = () => {
    setEyesOpen(false)
  }
  
  const handleClearAlarm = () => {
    if (alarmActive) {
      sendCommand({
        type: "clear_alarm",
        data: {}
      });
      setAlarmActive(false);
      console.log("警報已清除");
    } else {
      console.log("沒有活躍的警報需要清除");
    }
  }
  
  const handlePowerOff = () => {
    setRobotMode("STANDBY")
  }
  
  return (
    <main className="flex min-h-screen flex-col p-4 md:p-8 bg-[#050a10]">
      <Navigation />
      <Card className="flex-grow p-4 md:p-6 bg-[#0a1520] border-[#50bedc]/30 text-white">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-xl font-bold text-[#50bedc]">Remote Control</h1>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleZoomIn}
            >
              <Maximize className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleZoomOut}
            >
              <Minimize className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-[#50bedc]/30 text-[#50bedc] h-8 w-8"
              onClick={handleRotate}
            >
              <RotateCw className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className={`${videoActive ? "border-[#50bedc]/30 text-[#50bedc]" : "border-red-500/30 text-red-400"} h-8 w-8`}
              onClick={toggleCamera}
            >
              {videoActive ? <Video className="h-4 w-4" /> : <VideoOff className="h-4 w-4" />}
            </Button>
            <Button
              variant="outline"
              size="icon"
              className={`${faceDetectionActive ? "border-red-500/30 text-red-400" : "border-[#50bedc]/30 text-[#50bedc]"} h-8 w-8`}
              onClick={toggleFaceDetection}
              disabled={!videoActive}
              title="人臉檢測"
            >
              {faceDetectionActive ? <UserCheck className="h-4 w-4" /> : <UserRound className="h-4 w-4" />}
            </Button>
          </div>
        </div>

        <div className="relative flex-grow mb-4 border border-[#50bedc]/30 overflow-hidden rounded-md">
          {videoActive ? (
            <canvas ref={canvasRef} width={800} height={400} className="w-full h-full object-cover" />
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-[#0a1520]">
              <VideoOff className="h-16 w-16 text-[#50bedc]/50" />
              <p className="text-[#50bedc]/50 absolute bottom-4 left-0 right-0 text-center">Video feed disabled</p>
            </div>
          )}

          <div className="absolute top-2 right-2 flex items-center gap-2 bg-[#0a1520]/80 px-2 py-1 rounded">
            <div className={`h-2 w-2 rounded-full ${videoActive ? "bg-red-500 animate-pulse" : "bg-gray-500"}`}></div>
            <span className={`text-xs ${videoActive ? "text-red-400" : "text-gray-400"}`}>
              {videoActive ? "REC" : "OFF"}
            </span>
          </div>
        </div>

        {/* 人臉坐標表 */}
        {showCoordinates && faceDetectionActive && detectedFaces.length > 0 && (
          <div className="mb-4">
            <FaceCoordinatesTable faces={detectedFaces} />
          </div>
        )}

        {/* Robot control buttons */}
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div className="grid grid-cols-3 gap-2">
            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleRaiseHand}
            >
              <div className="flex flex-col items-center">
                <HandMetal className="h-4 w-4 mb-1" />
                <span className="text-xs">Raise</span>
              </div>
            </Button>

            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleLowerHand}
            >
              <div className="flex flex-col items-center">
                <ArrowDown className="h-4 w-4 mb-1" />
                <span className="text-xs">Lower</span>
              </div>
            </Button>

            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleOpenEyes}
            >
              <div className="flex flex-col items-center">
                <Eye className="h-4 w-4 mb-1" />
                <span className="text-xs">Open</span>
              </div>
            </Button>
          </div>

          <div className="grid grid-cols-3 gap-2">
            <Button
              className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button p-1"
              onClick={handleCloseEyes}
            >
              <div className="flex flex-col items-center">
                <EyeOff className="h-4 w-4 mb-1" />
                <span className="text-xs">Close</span>
              </div>
            </Button>

            <Button 
              className={`${alarmActive ? 'bg-[#251520] hover:bg-[#352530] text-red-400' : 'bg-[#0a1520] hover:bg-[#152535] text-[#50bedc]'} control-button p-1`}
              onClick={handleClearAlarm}
              disabled={!alarmActive}
            >
              <div className="flex flex-col items-center">
                <AlertTriangle className={`h-4 w-4 mb-1 ${alarmActive ? 'animate-pulse' : ''}`} />
                <span className="text-xs">{alarmActive ? '解除警報' : '無警報'}</span>
              </div>
            </Button>

            <Button
              className="bg-[#1a1520] hover:bg-[#251520] text-red-400 border-red-500/30 control-button p-1"
              onClick={handlePowerOff}
            >
              <div className="flex flex-col items-center">
                <Power className="h-4 w-4 mb-1" />
                <span className="text-xs">Power</span>
              </div>
            </Button>
          </div>
        </div>

        {/* Movement control buttons */}
        <div className="grid grid-cols-3 gap-4">
          <div className="col-span-3">
            <div className="grid grid-cols-3 gap-2">
              <div></div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowUp className="h-5 w-5" />
              </Button>
              <div></div>

              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowLeft className="h-5 w-5" />
              </Button>
              <div className="flex items-center justify-center text-[#50bedc]/70 text-xs">MOVE</div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowRight className="h-5 w-5" />
              </Button>

              <div></div>
              <Button className="bg-[#0a1520] hover:bg-[#152535] text-[#50bedc] control-button">
                <ArrowDown className="h-5 w-5" />
              </Button>
              <div></div>
            </div>
          </div>
        </div>
      </Card>
    </main>
  )
}
